import requests
import gzip
from bs4 import BeautifulSoup
import re
import os
import subprocess
import xml.etree.ElementTree as ET
import gzip
import json
import random

base = 'https://apkpure.com'
sitemap = 'https://apkpure.com/sitemap.xml'
apk_dest = './apk'
xml_dest = './xml'
data_dest = './data'

def check_dir(path):
	'''
	Check if directory exists. If not, make directory
	input: path
	'''
	if(os.path.exists(path) == False):
		os.mkdir(path)

def download(url, dest, name, file_type):
	'''
	Download content
	Input: url, save_destination, name, file_type
	'''
	resp = requests.get(url)
	data = resp.content
	with open('%s/%s.%s'%(dest, name, file_type), 'wb') as fh:
		fh.write(data)
		
def create_soup(url):
	'''
	Create soup object
	>>> url = 'https://www.gatesnotes.com'
	>>> out = create_soup(url)
	>>> type(out)
	<class 'bs4.BeautifulSoup'>
	'''
	resp = requests.get(url)
	return BeautifulSoup(resp.text)

def download_decode(app):
	name = re.search('s\/.+\.xml', app).group(0)[2:-4]
	print(name)

	check_dir(xml_dest)
	download(app, xml_dest, name, 'xml.gz')

	#parse xml to find url of app
	xml = gzip.open('%s/%s.xml.gz'%(xml_dest, name), 'r')
	soup = BeautifulSoup(xml, 'lxml')
	url = soup.find('loc').text

	# find download link
	soup = create_soup(url)
	download_url = base + soup.find('div', {'class':'ny-down'}).find('a')['href']
	print(download_url)
	soup = create_soup(download_url)
	download_url = soup.find('a', {'id':'download_link'})['href']
	print(download_url)
	check_dir(apk_dest)
	# download apk
	download(download_url, apk_dest, name, 'apk')

	check_dir(data_dest)
	# decode apk
	command = './apktool d %s/%s.apk -o %s/%s'%(apk_dest, name, data_dest, name)
	print('decoding...')
	os.popen(command)
	
def main(size, **kwargs):
	site = create_soup(sitemap)
	# Extract app links
	apps = [a.text for a in site.find_all('loc')][5:]
	random.shuffle(apps)
	count = 0
	for app in apps:
		if(count >= size): break
		try: 
			download_decode(app)
			count += 1
		except: pass

# cfg = json.load(open('config.json'))
# main(**cfg)